
fn main() {
    // Initialize config first
    config::init_config().expect("Failed to initialize config");

    let config = config::get_config().expect("Failed to get config");
    let config_for_manage = config.clone();

    unsafe {
        let result = CoInitializeEx(None, COINIT_APARTMENTTHREADED);
        if result.is_err() {
            error!("COM 初始化失败: {:?}", result.message());
        } else {
            info!("COM 初始化成功 (APARTMENTTHREADED)");
        }
    }

    let builder = tauri::Builder::default()
        .plugin(tauri_plugin_process::init())
        .plugin(tauri_plugin_log::Builder::new().build())
        .plugin(tauri_plugin_positioner::init())
        .plugin(tauri_plugin_global_shortcut::Builder::new().build())
        .setup(move |app| {
            info!("=== 应用程序启动 ===");
            info!("调试模式: {}", cfg!(debug_assertions));

            let app_handle = app.handle();

            if config.system.start_at_login {
                info!("[i] 开机自启动功能在 v2 中可能需要 tauri-plugin-autostart (待验证)");
            }

            input::hook::init(app_handle.clone());

            hint::init_hint_text_list_storage();
            info!("[✓] hints初始化成功");

            let main_window = app_handle.get_webview_window("main").unwrap();
            let main_window_clone = main_window.clone();
            init_monitors(&main_window_clone);
            info!("[✓] 显示器信息初始化成功");

            #[cfg(debug_assertions)]
            {
                let main_window_clone = main_window.clone();
                main_window_clone.open_devtools();
                info!("[✓] 主窗口开发工具已打开");
            }

            if config.system.start_in_tray {
                if let Err(e) = main_window.hide() {
                    error!("[✗] 启动时隐藏窗口失败: {}", e);
                }
                info!("[✓] 已最小化到托盘 (如果 show_tray_icon 为 true)");
            } else {
                if let Err(e) = main_window.show() {
                    error!("[✗] 启动时显示窗口失败: {}", e);
                }
            }

            let collect_interval = config.ui_automation.collect_interval;
            std::thread::spawn(move || {
                info!("[✓] UI元素收集线程已启动");
                loop {
                    std::thread::sleep(Duration::from_millis(collect_interval));
                    collect_ui_elements();
                }
            });

            let app_handle_clone = app_handle.clone();
            tauri::async_runtime::spawn(async move {
                info!("正在创建遮罩层窗口...");
                match create_overlay_windows(app_handle_clone).await {
                    Ok(_) => info!("[✓] 遮罩层窗口创建成功"),
                    Err(e) => error!("[✗] 创建overlay窗口失败: {}", e),
                }
            });

            let main_window_clone = main_window.clone();
            let hotkey_buoy = config.keybinding.hotkey_buoy.clone();
            let main_shortcut: Shortcut = FromStr::from_str(&hotkey_buoy).unwrap();
            app_handle
                .plugin(
                    tauri_plugin_global_shortcut::Builder::new()
                        .with_handler(move |_app, shortcut, event| {
                            println!("{:?}", shortcut);
                            if shortcut == &main_shortcut {
                                match event.state() {
                                    ShortcutState::Pressed => {
                                        let window_clone = main_window_clone.clone();
                                        tauri::async_runtime::spawn(async move {
                                            if let Err(e) = show_hints(window_clone).await {
                                                error!("[✗] 显示hints失败: {}", e);
                                            }
                                        });
                                    }
                                    ShortcutState::Released => {
                                        println!("Ctrl-H Released!");
                                    }
                                }
                            }
                        })
                        .build(),
                )
                .expect("Failed to build shortcut plugin");
            app_handle
                .global_shortcut()
                .register(main_shortcut)
                .expect("Failed to register shortcut");

            if config.system.show_tray_icon {
                let exit_item = MenuItemBuilder::with_id("exit", "Exit")
                    .build(app_handle)
                    .unwrap();
                let restart_item = MenuItemBuilder::with_id("restart", "Restart")
                    .build(app_handle)
                    .unwrap();
                let settings_item = MenuItemBuilder::with_id("settings", "Settings")
                    .build(app_handle)
                    .unwrap();

                let tray_menu = MenuBuilder::new(app_handle)
                    .item(&settings_item)
                    .item(&restart_item)
                    .item(&exit_item)
                    .build()
                    .expect("Failed to build tray menu");

                let tray_icon = Image::from_bytes(include_bytes!("../icons/icon.ico")).unwrap();

                let _tray_icon = TrayIconBuilder::new()
                    .menu(&tray_menu)
                    .on_menu_event(|tray_handle, event| {
                        let app_handle = tray_handle.app_handle();
                        match event.id.as_ref() {
                            "exit" => {
                                app_handle.exit(0);
                            }
                            "settings" => {
                                let window = app_handle.get_webview_window("main").unwrap();
                                window.show().unwrap();
                                window.set_focus().unwrap();
                            }
                            "restart" => {
                                app_handle.restart();
                            }
                            _ => {}
                        }
                    })
                    .icon(tray_icon)
                    .on_tray_icon_event(|tray_handle, event| {
                        let app_handle = tray_handle.app_handle();
                        match event {
                            TrayIconEvent::DoubleClick { .. } => {
                                let window = app_handle.get_webview_window("main").unwrap();
                                window.show().unwrap();
                                window.set_focus().unwrap();
                            }
                            _ => {}
                        }
                    })
                    .build(app_handle)
                    .expect("Failed to build tray icon");
                info!("[✓] 系统托盘已设置");
            } else {
                info!("[i] 系统托盘未启用");
            }

            info!("=== 应用程序初始化完成 ===");
            Ok(())
        })
        .invoke_handler(tauri::generate_handler![
            get_hint_styles,
            get_config_for_frontend,
            save_config_for_frontend,
        ])
        .on_window_event(|window, event| {
            if let WindowEvent::CloseRequested { api, .. } = event {
                window.hide().unwrap();
                api.prevent_close();
            }
        });

    let app = builder
        .build(tauri::generate_context!("Tauri.toml"))
        .expect("error while building tauri application");

    app.manage(config_for_manage);

    app.run(|_app_handle, event| {
        if let tauri::RunEvent::Exit = event {
            info!("应用程序正在退出，清理资源...");
            input::hook::cleanup();
            info!("[✓] 键盘钩子已清理");

            unsafe {
                CoUninitialize();
                info!("[✓] COM 已卸载");
            }
        }
    });
}
