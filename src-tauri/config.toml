[keyboard.available_key]
Back = 0x08
Tab = 0x09
CapsLock = 0x14
Enter = 0x0D
Esc = 0x1B
Space = 0x20
PageUp = 0x21
PageDown = 0x22
End = 0x23
Home = 0x24
Left = 0x25
Up = 0x26
Right = 0x27
Down = 0x28
Insert = 0x2D
Delete = 0x2E
LWin = 0x5B
RWin = 0x5C
Num0 = 0x60
Num1 = 0x61
Num2 = 0x62
Num3 = 0x63
Num4 = 0x64
Num5 = 0x65
Num6 = 0x66
Num7 = 0x67
Num8 = 0x68
Num9 = 0x69
NumMultiply = 0x6A
NumAdd = 0x6B
NumSubtract = 0x6D
NumDecimal = 0x6E
NumDivide = 0x6F
F1 = 0x70
F2 = 0x71
F3 = 0x72
F4 = 0x73
F5 = 0x74
F6 = 0x75
F7 = 0x76
F8 = 0x77
F9 = 0x78
F10 = 0x79
F11 = 0x7A
F12 = 0x7B
LShift = 0xA0
RShift = 0xA1
LCtrl = 0xA2
RCtrl = 0xA3
LAlt = 0xA4
RAlt = 0xA5
[keyboard]
propagation_modifier = ["LCtrl", "RCtrl", "LAlt", "RAlt", "LWin", ]
[keyboard.map_left_right]
"`" = { right = "1" }
1 = { left = "`", right = "2" }
2 = { left = "1", right = "3" }
3 = { left = "2", right = "4" }
4 = { left = "3", right = "5" }
5 = { left = "4", right = "6" }
6 = { left = "5", right = "7" }
7 = { left = "6", right = "8" }
8 = { left = "7", right = "9" }
9 = { left = "8", right = "0" }
0 = { left = "9", right = "-" }
- = { left = "0", right = "=" }
"=" = { left = "-" }
Q = { right = "W" }
W = { left = "Q", right = "E" }
E = { left = "W", right = "R" }
R = { left = "E", right = "T" }
T = { left = "R", right = "Y" }
Y = { left = "T", right = "U" }
U = { left = "Y", right = "I" }
I = { left = "U", right = "O" }
O = { left = "I", right = "P" }
P = { left = "O", right = "[" }
"[" = { left = "P", right = "]" }
"]" = { left = "[", right = "\\" }
"\\" = { left = "]"}
A = { right = "S" }
S = { left = "A", right = "D" }
D = { left = "S", right = "F" }
F = { left = "D", right = "G" }
G = { left = "F", right = "H" }
H = { left = "G", right = "J" }
J = { left = "H", right = "K" }
K = { left = "J", right = "L" }
L = { left = "K", right = ";" }
";" = { left = "L", right = "'" }
"'" = { left = ";", right = "/" }
Z = { right = "X" }
X = { left = "Z", right = "C" }
C = { left = "X", right = "V" }
V = { left = "C", right = "B" }
B = { left = "V", right = "N" }
N = { left = "B", right = "M" }
M = { left = "N", right = "," }
"," = { left = "M", right = "." }
"." = { left = ",", right = "/" }
"/" = { left = "." }


[hint]
# available charset: A-Z, 0-9, '-', '=', '[', ']', '\', ';', '\'', ',', '.', '/', '`'
charsets = [
    ['B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'R',
    'S', 'T', 'U', 'V', 'W', 'X', 'Y', '2', '3', '4', '6', '7', '8', '9'],
    ['B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'R',
    'S', 'T', 'U', 'V', 'W', 'X', 'Y', '2', '3', '4', '6', '7', '8', '9']
]
# make sure charset_extra is not in hints.charsets
# available charset: A-Z, 0-9, '-', '=', '[', ']', '\', ';', '\'', ',', '.', '/', '`'
charset_extra = ['=', '-']

[hint.types.default]
style = { background_color = "rgba(66, 133, 244, 1)", font_size = "11px", color = "black", border = "1px solid #fff", border_radius = "4px", box_shadow = "0 4px 8px rgba(0, 0, 0, 0.15)" }
z_index = 0
[hint.types.text]
style = { background_color = "rgba(66, 133, 244, 1)", font_size = "11px", color = "black" }
z_index = 1
[hint.types.window]
style = { background_color = "rgba(223, 8, 252, 1)", font_size = "13px", color = "white" }
z_index = 5
[hint.types.pane]
style = { background_color = "rgba(67, 7, 231, 1)", font_size = "12px", color = "white" }
z_index = 1
[hint.types.tab]
style = { background_color = "rgba(225, 240, 22, 1)", font_size = "11px", color = "black" }
z_index = 2
[hint.types.button]
style = { background_color = "rgba(66, 133, 244, 1)", font_size = "11px", color = "black" }
z_index = 4
[hint.types.scrollbar]
style = { background_color = "rgba(19, 148, 30, 1)", font_size = "11px", color = "black" }
z_index = 3

[keybinding]
hotkey_buoy = "Alt+H"

[keybinding.global]
exit = ["Esc"]
hold_at_hint = ["HintKey", "Space"]
left_click_exit = ["HintKey", "Space"]
move_to_hint = ["HintKey"]
# only HintKey works here. there for it is an option for move or move&exit
move_to_hint_exit = []
[keybinding.global.translate]
up = ["Up"]
down = ["Down"]
left = ["Left"]
right = ["Right"]

[keybinding.at_hint]
exit = ["Esc"]
double_click = ["Enter"]
double_click_exit = []
left_click = ["LShift"]
left_click_exit = ["HintLeftKey"]
right_click = ["RShift"]
right_click_exit = ["HintRightKey"]
middle_click = []
middle_click_exit = ["`"]
[keybinding.at_hint.translate]
up = []
down = []
left = []
right = []
[keybinding.at_hint.drag]
up = ["Up"]
down = ["Down"]
left = ["Left"]
right = ["Right"]
[keybinding.at_hint.scroll]
up = ["I","E"]
down = ["K","D"]
left = ["J","S"]
right = ["L","F"]

[mouse.step]
# make sure modifier is not in keybindings.global.propagation_modifier
# available modifiers: LShift, RShift, LCtrl, RCtrl, LAlt, RAlt, LWin, RWin, CapsLock, Tab
translate = [{ x = 10, y = 10 }, { x = 50, y = 50, modifier = ["Tab", "\\"] }]
# do not use Shift as modifier, the scroll will function by switch direction between vertical and horizontal
scroll = [{ x = 120, y = -120 }, { x = 600, y = -600, modifier = ["Tab", "\\"] }]
drag = [{ x = 10, y = 10 }, { x = 50, y = 50, modifier = ["Tab", "\\"] }]

[system]
start_in_tray = true
show_tray_icon = true
start_at_login = true

[ui_automation]
collect_interval = 1000